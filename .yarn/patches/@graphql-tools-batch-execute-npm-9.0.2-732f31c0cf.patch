diff --git a/cjs/createBatchingExecutor.js b/cjs/createBatchingExecutor.js
index b3b8408f95648a3c579068d4616d04dfeb33000e..b54657dfb76a8609f9cfe3d77b937e409c35b37b 100644
--- a/cjs/createBatchingExecutor.js
+++ b/cjs/createBatchingExecutor.js
@@ -26,7 +26,7 @@ function createBatchingExecutor(executor, dataLoaderOptions, extensionsReducer =
     };
 }
 exports.createBatchingExecutor = createBatchingExecutor;
-function createLoadFn(executor, extensionsReducer) {
+function createLoadFn(executor, extensionsReducer = defaultExtensionsReducer) {
     return function batchExecuteLoadFn(requests) {
         if (requests.length === 1) {
             return new value_or_promise_1.ValueOrPromise(() => executor(requests[0]))
@@ -42,6 +42,7 @@ function createLoadFn(executor, extensionsReducer) {
         });
     };
 }
+exports.createLoadFn = createLoadFn;
 function defaultExtensionsReducer(mergedExtensions, request) {
     const newExtensions = request.extensions;
     if (newExtensions != null) {
diff --git a/esm/createBatchingExecutor.js b/esm/createBatchingExecutor.js
index af86572bc7e346b19cf545daa7cf868de5734b70..65adc507590e74da9d85770e70aa9978d392e68f 100644
--- a/esm/createBatchingExecutor.js
+++ b/esm/createBatchingExecutor.js
@@ -21,7 +21,7 @@ export function createBatchingExecutor(executor, dataLoaderOptions, extensionsRe
         }
     };
 }
-function createLoadFn(executor, extensionsReducer) {
+export function createLoadFn(executor, extensionsReducer = defaultExtensionsReducer) {
     return function batchExecuteLoadFn(requests) {
         if (requests.length === 1) {
             return new ValueOrPromise(() => executor(requests[0]))
diff --git a/typings/createBatchingExecutor.d.cts b/typings/createBatchingExecutor.d.cts
index 066aaca9ccca6c9020aabc9a8b8f0051724c13ae..587e91c39112418e1b2d0572e68cf897ed6d14c7 100644
--- a/typings/createBatchingExecutor.d.cts
+++ b/typings/createBatchingExecutor.d.cts
@@ -1,3 +1,4 @@
 import DataLoader from 'dataloader';
-import { ExecutionRequest, Executor } from '@graphql-tools/utils';
+import { ExecutionRequest, ExecutionResult, Executor } from '@graphql-tools/utils';
 export declare function createBatchingExecutor(executor: Executor, dataLoaderOptions?: DataLoader.Options<any, any, any>, extensionsReducer?: (mergedExtensions: Record<string, any>, request: ExecutionRequest) => Record<string, any>): Executor;
+export declare function createLoadFn(executor: Executor, extensionsReducer?: (mergedExtensions: Record<string, any>, request: ExecutionRequest) => Record<string, any>): DataLoader.BatchLoadFn<ExecutionRequest, ExecutionResult>;
diff --git a/typings/createBatchingExecutor.d.ts b/typings/createBatchingExecutor.d.ts
index 066aaca9ccca6c9020aabc9a8b8f0051724c13ae..587e91c39112418e1b2d0572e68cf897ed6d14c7 100644
--- a/typings/createBatchingExecutor.d.ts
+++ b/typings/createBatchingExecutor.d.ts
@@ -1,3 +1,4 @@
 import DataLoader from 'dataloader';
-import { ExecutionRequest, Executor } from '@graphql-tools/utils';
+import { ExecutionRequest, ExecutionResult, Executor } from '@graphql-tools/utils';
 export declare function createBatchingExecutor(executor: Executor, dataLoaderOptions?: DataLoader.Options<any, any, any>, extensionsReducer?: (mergedExtensions: Record<string, any>, request: ExecutionRequest) => Record<string, any>): Executor;
+export declare function createLoadFn(executor: Executor, extensionsReducer?: (mergedExtensions: Record<string, any>, request: ExecutionRequest) => Record<string, any>): DataLoader.BatchLoadFn<ExecutionRequest, ExecutionResult>;
